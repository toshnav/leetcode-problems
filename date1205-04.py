# 507. Perfect Number
# Easy
# 556
# 844

# Add to List
# Share
# A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.
# Given an integer n, return true if n is a perfect number, otherwise return false.
# Example 1:
# Input: num = 28
# Output: true
# Explanation: 28 = 1 + 2 + 4 + 7 + 14
# 1, 2, 4, 7, and 14 are all divisors of 28.
# Example 2:
# Input: num = 7
# Output: false

# My Solution :
class Solution(object):
    def checkPerfectNumber(self, num):
        """
        :type num: int
        :rtype: bool
        """
        if num <=0:
            return False
        sum1 = 0
        i = 1
        while(i*i<=num):
            if (num %i ==0):
                sum1=sum1 + i
                if (i * i!=num):
                    sum1 = sum1 + num/i
            i = i + 1
        return (sum1 - num) == num
    
# Approach #4 Euclid-Euler Theorem [Accepted]
# Algorithm

# Euclid proved that 2^{p−1}(2^p − 1)2 
# p−1
#  (2 
# p
#  −1) is an even perfect number whenever 2^p − 12 
# p
#  −1 is prime, where pp is prime.

# For example, the first four perfect numbers are generated by the formula 2^{p−1}(2^p − 1)2 
# p−1
#  (2 
# p
#  −1), with pp a prime number, as follows:

# for p = 2:   21(22 − 1) = 6
# for p = 3:   22(23 − 1) = 28
# for p = 5:   24(25 − 1) = 496
# for p = 7:   26(27 − 1) = 8128.
# Prime numbers of the form 2^p − 12 
# p
#  −1 are known as Mersenne primes. For 2^p − 12 
# p
#  −1 to be prime, it is necessary that pp itself be prime. However, not all numbers of the form 2^p − 12 
# p
#  −1 with a prime pp are prime; for example, 2^{11} − 1 = 2047 = 23 × 892 
# 11
#  −1=2047=23×89 is not a prime number.

# You can see that for small value of pp, its related perfect number goes very high. So, we need to evaluate perfect numbers for some primes (2, 3, 5, 7, 13, 17, 19, 31)(2,3,5,7,13,17,19,31) only, as for bigger prime its perfect number will not fit in 64 bits.


# Complexity Analysis

# Time complexity : O(\log{n})O(logn). Number of primes will be in order \log{num}lognum.

# Space complexity : O(\log{n})O(logn). Space used to store primes.
 